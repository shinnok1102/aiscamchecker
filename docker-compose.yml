version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80" # Map host port 8080 to container port 80 (Nginx default)
    environment:
      # The GEMINI_API_KEY will be passed from the .env file (not committed)
      # or from the environment where docker-compose is run.
      # The application's vite.config.js is set up to read GEMINI_API_KEY
      # and make it available as process.env.GEMINI_API_KEY
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    # volumes:
      # Example for development (uncomment if needed, and ensure paths are correct):
      # - .:/app
      # - /app/node_modules # Exclude node_modules from being overwritten by the mount
      # Ensure that if you use volumes for development, your Dockerfile's build stage
      # is still effective or you have a separate development Dockerfile/stage.
    restart: unless-stopped
    # Optional: Add healthcheck
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

# Note:
# To run this, you would typically have a .env file in the same directory as this docker-compose.yml
# with your GEMINI_API_KEY, for example:
# GEMINI_API_KEY=your_actual_api_key_here
#
# Alternatively, you can pass the environment variable when running docker-compose:
# GEMINI_API_KEY=your_actual_api_key_here docker-compose up
